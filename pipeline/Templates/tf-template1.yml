# parameters:
# - name: Environments
#   displayName: Select Environments for deployment
#   type: string
#   default: Dev
#   values: 
#     - Dev
#     - Prod
#     - QA
#     - Sendbox

parameters:
  - name: Environments


# variables:
#   # this is the first way we directly give like variablename: value
#   Work_dir: $(System.DefaultWorkingDirectory)/Environments

    #this is the 2nd way in which saperately define name then variable value
  # - name: Work_dir
  #   value: $(System.DefaultWorkingDirectory)/Environments


stages:
  - stage: tflint
    displayName: "Lint Terraform Code"
    jobs:
      - job: tflintinstall
        displayName: tflint install
        steps:
        - script: |
            curl -LO https://github.com/terraform-linters/tflint/releases/latest/download/tflint_windows_amd64.zip
            tar -xf tflint_windows_amd64.zip -C $(Work_dir)
          displayName: 'Install TFLint'

        - script: |
            $(Work_dir)\tflint --init
            $(Work_dir)\tflint
          displayName: 'Run TFLint'
            
  - stage: Terraforminstaller
    displayName: Terraform tool installer
    jobs:
      - job: Terraforminstaller
        displayName: Terraform tool installer
        steps:
        - task: TerraformInstaller@1
          displayName: Terraform installer
          inputs:
            terraformVersion: 'latest'

  - stage: Terraforminitplanandtfsec
    dependsOn: Terraforminstaller
    displayName: Terraform init, plan and tfsec
    jobs:
      - job: tfsec
        displayName: tfsec check
        steps:
        - task: tfsec@1
          displayName: Tfsec Check vulnerability
          inputs:
            version: 'v1.26.0'
            dir: '$(Work_dir)'

      - job: Terraforminitandplan
        displayName: Terraform init and plan
        steps:
        - task: TerraformTaskV4@4
          displayName: terraform init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(Work_dir)'
            backendServiceArm: '${service_coneection}'
            backendAzureRmResourceGroupName: 'prashant_rg'
            backendAzureRmStorageAccountName: 'prastoragehai'
            backendAzureRmContainerName: 'mypracontainer'
            backendAzureRmKey: '${{ parameters.Environments }}_terraform.tfstate'

        - task: TerraformTaskV4@4
          displayName: terraform plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(Work_dir)'
            commandOptions: '--var-file=${{ parameters.Environments }}_Terraform.tfvars'
            environmentServiceNameAzureRM: '${service_coneection}'

  - stage: ManualValidationandterraformapply
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    displayName: Manual Validation and terraform apply
    jobs:
      - job: Manualvalidation
        timeoutInMinutes: 1
        displayName: Manual validation
        pool: server
        steps:
        - task: ManualValidation@1
          displayName: Manual validation
          inputs:
            notifyUsers: 'prashantgi1995@gmail.com'
            approvers: 'prashantgi1995@gmail.com'

      - job: Terraformapply
        dependsOn: Manualvalidation
        displayName: Terraform apply
        steps:
        - task: TerraformTaskV4@4
          displayName: terraform init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(Work_dir)'
            backendServiceArm: '${service_coneection}'
            backendAzureRmResourceGroupName: 'prashant_rg'
            backendAzureRmStorageAccountName: 'prastoragehai'
            backendAzureRmContainerName: 'mypracontainer'
            backendAzureRmKey: '${{ parameters.Environments }}.tfstate'

        - task: TerraformTaskV4@4
          displayName: terraform apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(Work_dir)'
            environmentServiceNameAzureRM: '${service_coneection}'